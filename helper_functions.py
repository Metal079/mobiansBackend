import io
import base64
import logging

from PIL import Image, ImageDraw, ImageFont, PngImagePlugin


# ---- image manipulation -----


async def remove_alpha_channel(image):
    # Convert image to RGB if it has an alpha channel
    if image.mode == "RGBA":
        buffer = io.BytesIO()
        # Separate alpha channel and add white background
        background = Image.new("RGBA", image.size, (255, 255, 255))
        alpha_composite = Image.alpha_composite(background, image).convert("RGB")
        alpha_composite.save(buffer, format="PNG")
        return alpha_composite
    else:
        return image


async def add_image_metadata(image, request_data):
    img_io = io.BytesIO()

    image_with_watermark = add_watermark(image)

    # Add metadata
    metadata = PngImagePlugin.PngInfo()
    try:
        # Add disclamer to metadata if job is not txt2img
        if request_data.job_type != "txt2img":
            metadata.add_text(
                "NOTE",
                "The image was not generated purely using txt2img, using the info below may not give you the same results.",
            )

        metadata.add_text("prompt", request_data.prompt)
        request_data.negative_prompt = request_data.negative_prompt.replace("admin", "")
        metadata.add_text("negative_prompt", request_data.negative_prompt)
        metadata.add_text("seed", str(request_data.seed))
        metadata.add_text("cfg", str(request_data.guidance_scale))
        metadata.add_text("job_type", request_data.job_type)
    except:
        # log to text file
        logging.error(f"Error adding metadata to image")
        with open("error_log.txt", "a") as f:
            f.write(f"Error adding metadata to image: {request_data}\n")
    metadata.add_text("model", "Mobians.ai / SonicDiffusionV4")
    metadata.add_text(
        "Disclaimer",
        "The image is generated by Mobians.ai. The image is not real and is generated by an AI.",
    )

    image_with_watermark.save(img_io, format="PNG", pnginfo=metadata)
    # image_with_watermark.save(img_io, format='WEBP', quality=95)
    img_io.seek(0)
    base64_image = base64.b64encode(img_io.getvalue()).decode("utf-8")
    return base64_image


async def add_watermark(image):
    # Create watermark image
    watermark_text = "Mobians.ai"
    opacity = 128
    watermark = Image.new("RGBA", image.size, (255, 255, 255, 0))
    draw = ImageDraw.Draw(watermark)

    # Provide the correct path to the font file
    font_file_path = r"fonts/Roboto-Medium.ttf"
    font = ImageFont.truetype(font_file_path, 25)

    # Draw black stroke
    stroke_width = 2
    for dx in range(-stroke_width, stroke_width + 1):
        for dy in range(-stroke_width, stroke_width + 1):
            draw.text(
                (10 + dx, 10 + dy), watermark_text, font=font, fill=(0, 0, 0, opacity)
            )

    # Draw white text over the black stroke
    draw.text((10, 10), watermark_text, font=font, fill=(255, 255, 255, opacity))

    # Overlay watermark on the original image
    image_with_watermark = Image.alpha_composite(image.convert("RGBA"), watermark)
    return image_with_watermark
